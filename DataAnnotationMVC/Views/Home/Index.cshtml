@using System.Web.Optimization;
@model DataAnnotationMVC.Models.Employee

@{
    ViewBag.Title = "Index";
}


<h2>Index</h2>


@using (Html.BeginForm("Index", "Home")) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
          @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.TextBoxFor(model => model.UserName, htmlAttributes: new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" } )
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new {@class="control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.DropDownListFor(model => model.State, (IEnumerable<SelectListItem>)ViewBag.States,htmlAttributes: new {@class="form-control"  })
                @Html.ValidationMessageFor(model => model.State, "", new {@class="text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Lob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.EditorFor(model => model.Lob, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Lob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsChecked, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.CheckBoxFor(model => model.IsChecked, new { @class = "left" })
                @Html.ValidationMessageFor(model => model.IsChecked, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="UI_btn" class="btn btn-default">SignUp</button>
                @*<input type="submit" value="Create" class="btn btn-default" />*@
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
@*<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>*@
@Scripts.Render("~/bundles/JqryVal")

<script>
    $.validator.unobtrusive.adapters.addSingleVal("exclude", "exchar");

    $.validator.addMethod("exclude", function (inputValue, inputElement, exchar) {
        var returnVal = true;
        try {
            if (String(inputValue).indexOf('@@') > -1) {

                console.log(exchar);
                console.log(inputValue);
                returnVal =false;
            }
            else { returnVal = true; }
        }
        catch (err) {
            returnVal = false;
        }

        return returnVal;

    });

    $.validator.unobtrusive.adapters.addSingleVal("checkbox", "check");

    $.validator.addMethod("checkbox", function (inputValue, inputElement, check) {
        var returnVal = true;
        try {
            
            if (inputValue == "true") {
                returnVal = true;
            }
            else { returnVal = false; }
        }
        catch (err) {
            returnVal = false;
        }

        return returnVal;

    });
</script>
